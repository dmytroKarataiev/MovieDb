/*
 *  The MIT License (MIT)
 *
 *  Copyright (c) 2016. Dmytro Karataiev
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        applicationId "com.adkdevelopment.moviesdb"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "0.1"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'MOVIE_DB_API_KEY', movieDbApiKey
        it.buildConfigField 'String', 'YOUTUBE_API_KEY', youtubeApiKey
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

if (project.hasProperty("moviesdb.signing")
        && new File(project.property("moviesdb.signing") + ".gradle").exists()) {
    apply from: project.property("moviesdb.signing") + ".gradle";
}

ext {
    compatLibVersion = '24.2.1'
    butterknife = '8.3.0'
    retrofit = '2.1.0'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:$compatLibVersion"
    compile "com.android.support:design:$compatLibVersion"
    compile "com.android.support:palette-v7:$compatLibVersion"
    compile "com.android.support:cardview-v7:$compatLibVersion"

    // injections
    apt "com.jakewharton:butterknife-compiler:$butterknife"
    compile "com.jakewharton:butterknife:$butterknife"
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'org.jetbrains:annotations:13.0'

    // image downloader
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Circle ImageView
    compile 'de.hdodenhof:circleimageview:2.1.0'

    // download and parse data
    compile 'com.google.code.gson:gson:2.7'

    // data fetching and converting to objects
    compile "com.squareup.retrofit2:retrofit:$retrofit"
    compile "com.squareup.retrofit2:converter-gson:$retrofit"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit"

    // RxJava + RxAndroid
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.9'

    // fix memory leaks if they are present
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
}

repositories {
    mavenCentral()
}